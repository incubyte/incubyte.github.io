<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Incubyte Blog</title>
    <link>https://blog.incubyte.co/tags/ruby/</link>
    <description>Recent content in Ruby on Incubyte Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© 2025 Incubyte - All Rights Reserved</copyright>
    <lastBuildDate>Mon, 04 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.incubyte.co/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Conquer nil: Clean Up Your Rails Code with the Fear Gem</title>
      <link>https://blog.incubyte.co/blog/write-cleaner-rails-code-with-fear/</link>
      <pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.incubyte.co/blog/write-cleaner-rails-code-with-fear/</guid>
      <description>&lt;p&gt;Ever found yourself drowning in a sea of &lt;code&gt;nil&lt;/code&gt; checks? Or perhaps you’ve built a fortress of &lt;code&gt;begin/rescue&lt;/code&gt;&#xA;blocks just to handle potential errors? If you’re nodding along, you’re not alone. Ruby developers often&#xA;find themselves writing defensive code: checking for nil values, handling edge cases, and wrestling with&#xA;error management. It’s like walking on eggshells, constantly fearing what might break.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Everything is an Object in Ruby: Even Classes</title>
      <link>https://blog.incubyte.co/blog/everything-is-an-object-in-ruby/</link>
      <pubDate>Wed, 18 Sep 2024 12:41:04 +0530</pubDate>
      <guid>https://blog.incubyte.co/blog/everything-is-an-object-in-ruby/</guid>
      <description>&lt;p&gt;Ruby is a pure object-oriented programming language, and one of the key features that sets it apart from many other languages is its philosophy that everything is an object. Whether you&amp;rsquo;re working with strings, numbers, arrays, or even classes themselves, everything in Ruby is treated as an object. This is a powerful concept that simplifies the language and makes it more consistent and flexible. Let&amp;rsquo;s dive deeper into what this means, especially the idea that even classes are objects in Ruby.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Enigma of Ruby Boolean (or the lack thereof)</title>
      <link>https://blog.incubyte.co/blog/ruby-boolean/</link>
      <pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.incubyte.co/blog/ruby-boolean/</guid>
      <description>&lt;p&gt;Imagine this:&#xA;You wake up half-asleep to discover Darth Vader in a rage. He&amp;rsquo;s furious because the count of active stormtroopers he&#xA;sees on the system you coded doesn&amp;rsquo;t align with the Imperial Army data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monkey Patching in Ruby</title>
      <link>https://blog.incubyte.co/blog/monkey-patch/</link>
      <pubDate>Tue, 17 Oct 2023 18:29:54 +0530</pubDate>
      <guid>https://blog.incubyte.co/blog/monkey-patch/</guid>
      <description>&lt;p&gt;Ruby, as you all know, is a dynamic programming language that provides the ability and hence freedom to reopen the existing classes and change their behavior during runtime by adding new methods or modifying existing methods. This is what we refer to as &amp;lsquo;Monkey Patching&amp;rsquo;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
